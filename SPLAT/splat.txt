SPLAT: Spatial Platform for Localized Area Technologies
Product Summary

Product Overview
SPLAT (Spatial Platform for Localized Area Technologies) is an advanced, containerized automation system designed to facilitate complex operations within Local Area Networks (LANs). SPLAT is engineered to execute a wide range of tasks, triggered by either scheduled, timed events or user-pinged interactions. It is built with a modular architecture, enabling seamless integration into existing networks while ensuring secure and efficient operation of critical processes, including file management, web scraping, FTP operations, and automated system maintenance.

Purpose
The purpose of SPLAT is to deliver an intelligent, scalable, and secure solution for automating localized network tasks across diverse environments, from enterprise IT infrastructures to government and military networks. Whether used for managing files, gathering data from external websites, transferring files over FTP, or self-maintaining through an auto-deletion feature, SPLAT offers unparalleled efficiency and control.

Key objectives include:

Optimized Automation: Automate repetitive tasks within networks, eliminating human error and streamlining operations.
Containerized Flexibility: Run a variety of containers to execute specific tasks on demand, providing flexibility and adaptability.
Network Efficiency: Improve the responsiveness and performance of networks by executing crucial operations with minimal human intervention.
Security: Ensure that all operations are performed under secure conditions, preventing unauthorized access and ensuring safe execution of network tasks.
Design and Architecture
SPLAT is designed around the principles of containerization and modularity. At its core, it leverages flexible and reusable containers that execute specific tasks based on the system's triggers.

Trigger Modes: SPLAT operates in two modes:
Timed Mode: Executes tasks based on a predetermined schedule.
Pinged Mode: Executes tasks in response to an external request (such as a "ping" sent over a network).
Containers: Containers are executable units that can perform a variety of operations:
File Management: Opening, reading, and manipulating files on local systems.
Web Scraping: Extracting data from web pages via HTTP requests.
FTP Operations: Uploading or downloading files from FTP servers.
Auto-Deletion: A built-in mechanism that deletes the SPLAT system, containers, and associated cache files after a task is completed, ensuring the integrity and security of the environment.
Each container is customizable and configured for specific needs, making SPLAT adaptable for a wide range of tasks across different industries.

Evolution of SPLAT
SPLAT originated as a small script written by Cameron Clark at the age of 15 to facilitate LAN-based tasks. Initially designed in MS-DOS, it was a simple program triggered by either scheduled or external "ping" requests to execute specific operations. As technology evolved, so did SPLAT—adapting from a basic MS-DOS script to a modern, Python-based platform that leverages powerful libraries and frameworks for network operations.

Early Design: The first iteration of SPLAT focused primarily on file handling and local network automation. It was rudimentary but efficient, fulfilling the needs of small-scale operations.

Transition to Python: As SPLAT grew, it migrated from MS-DOS to Python, incorporating powerful libraries such as Flask for web requests, ftplib for FTP operations, and requests for web scraping. This evolution enabled SPLAT to scale with the increasing complexity of network operations and automation.

Containerization: The system was restructured around containerized modules, allowing for much greater flexibility and the ability to perform a wide variety of tasks based on the needs of the network. This transformation enabled SPLAT to handle multiple types of tasks simultaneously, from file operations to data extraction.

Security & Auto-Deletion: SPLAT's most recent iteration incorporated a focus on security, ensuring that all operations are performed within safe parameters. Furthermore, a new "auto-delete" feature was added to clean up all traces of the system after each operation, guaranteeing minimal risk of system contamination or unauthorized access.

How SPLAT Works
SPLAT functions through a two-phase execution process:

Triggering:
SPLAT can be triggered in two ways: either by a timed event (based on a preconfigured schedule) or by an external ping (via an HTTP request to a specific endpoint).
Execution:
Upon activation, SPLAT checks its configuration for the appropriate container to execute. Each container is designed to handle a specific operation (e.g., open a file, scrape a website, transfer data over FTP).
Once the task is completed, SPLAT either waits for the next trigger or, in some cases, deletes itself along with its associated files to maintain a secure and clean environment.
Key Features
Modular, Containerized Architecture: Enables flexibility and scalability, allowing new containers to be added easily.
Timed and Pinged Triggers: Offers two modes of operation for tailored task execution.
FTP Integration: Supports both file upload and download over FTP, making it an ideal solution for data management.
Web Scraping: Extracts and processes data from specified web pages for integration into your workflow.
Auto-Deletion: Ensures that all associated files, containers, and cache data are removed after task completion for security and privacy.
Scalability: Suitable for small-scale, local networks, as well as larger enterprise-level deployments.
The Impact of SPLAT
SPLAT is more than just a tool—it's an automation platform that can significantly improve efficiency in Local Area Networks. By automating time-consuming tasks such as data scraping, file handling, and FTP transfers, SPLAT allows organizations to focus on more important activities while leaving routine operations to an intelligent and self-sufficient system.

Furthermore, SPLAT’s secure and self-maintaining capabilities ensure that your network and data remain safe, minimizing the risk of human error, system vulnerabilities, and unauthorized access.

Future Development
As technology continues to evolve, SPLAT will evolve with it. Future versions of SPLAT may incorporate advanced machine learning algorithms to enhance decision-making in automated processes or integrate deeper with cloud environments, enabling seamless hybrid cloud-LAN operations.

By continually adapting to the changing needs of technology and networking, SPLAT is poised to remain a vital tool for secure and efficient network automation for years to come.


.....


import os
import time
import threading
from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import requests  # For web scraping
import ftplib  # For FTP operations
import webbrowser  # To open files or URLs
import subprocess  # For running external scripts
import shutil  # For file and folder deletion

# SPLAT Configuration
config = {
    "trigger_mode": "pinged",  # Options: "timed" or "pinged"
    "trigger_time": "2025-01-11 18:00:00",  # Time to execute (used if "timed")
    "ping_endpoint": "/trigger_splat",  # Endpoint to trigger (used if "pinged")
    "auth_key": "secure_key_123",  # Key for authentication
    "containers": {  # Define executable containers
        "open_image": {"type": "open_file", "path": "example.jpg"},
        "web_scraper": {"type": "scrape", "url": "https://example.com"},
        "ftp_transfer": {
            "type": "ftp",
            "action": "download",  # "upload" or "download"
            "remote_file": "/remote/example.txt",
            "local_file": "downloaded_example.txt",
        },
        "external_script": {
            "type": "external_script",
            "script_path": "media_scraper_server_config.py",  # External script path
            "target_ip": "192.168.1.1",  # Target IP for upload
        },
        "auto_delete": {
            "type": "auto_delete",
            "paths_to_delete": [
                "SPLAT", "containers", "cache",  # Paths to be deleted
            ],
        },
    },
}

# Action Handlers
def execute_open_file(path):
    """Open a file using the default system application."""
    if os.path.exists(path):
        print(f"[SPLAT] Opening file: {path}")
        webbrowser.open(path)
    else:
        print(f"[SPLAT] File not found: {path}")

def execute_scrape(url):
    """Perform a simple web scrape."""
    try:
        print(f"[SPLAT] Scraping URL: {url}")
        response = requests.get(url)
        if response.status_code == 200:
            print(f"[SPLAT] Content from {url}:\n{response.text[:500]}")  # Print first 500 chars
        else:
            print(f"[SPLAT] Failed to scrape {url}. Status code: {response.status_code}")
    except Exception as e:
        print(f"[SPLAT] Error during scraping: {e}")

def execute_ftp(action, remote_file, local_file):
    """Perform FTP operations (upload/download)."""
    try:
        print(f"[SPLAT] FTP Action: {action}, Remote File: {remote_file}, Local File: {local_file}")
        ftp = ftplib.FTP(config["containers"]["ftp_transfer"]["server"])
        ftp.login(config["containers"]["ftp_transfer"]["username"], config["containers"]["ftp_transfer"]["password"])

        if action == "download":
            with open(local_file, "wb") as f:
                ftp.retrbinary(f"RETR {remote_file}", f.write)
        elif action == "upload":
            with open(local_file, "rb") as f:
                ftp.storbinary(f"STOR {remote_file}", f)
        else:
            print("[SPLAT] Invalid FTP action")
        ftp.quit()
    except Exception as e:
        print(f"[SPLAT] FTP error: {e}")

def execute_external_script(script_path, target_ip):
    """Execute the external Python script (media scraper) with specified IP address."""
    try:
        print(f"[SPLAT] Executing media scraper script: {script_path}")
        subprocess.run(["python", script_path, target_ip], check=True)
        print("[SPLAT] Media scraping and upload completed.")
        
        # Once the media scraping is completed, trigger the auto-delete container
        print("[SPLAT] Triggering cleanup (auto-delete) after media scraper completes.")
        execute_container("auto_delete")
    except Exception as e:
        print(f"[SPLAT] Error executing media scraper script: {e}")

def execute_auto_delete(paths_to_delete):
    """Delete the specified paths (SPLAT, containers, cache)."""
    try:
        for path in paths_to_delete:
            if os.path.exists(path):
                if os.path.isdir(path):
                    shutil.rmtree(path)
                    print(f"[SPLAT] Deleted directory: {path}")
                else:
                    os.remove(path)
                    print(f"[SPLAT] Deleted file: {path}")
            else:
                print(f"[SPLAT] Path not found: {path}")
    except Exception as e:
        print(f"[SPLAT] Error during auto-delete: {e}")

# Container Execution
def execute_container(container_name):
    """Executes a container operation."""
    container = config["containers"].get(container_name)
    if not container:
        print(f"[SPLAT] Container '{container_name}' not found.")
        return

    container_type = container["type"]
    if container_type == "open_file":
        execute_open_file(container["path"])
    elif container_type == "scrape":
        execute_scrape(container["url"])
    elif container_type == "ftp":
        execute_ftp(
            action=container["action"],
            remote_file=container["remote_file"],
            local_file=container["local_file"],
        )
    elif container_type == "external_script":
        execute_external_script(
            script_path=container["script_path"],
            target_ip=container["target_ip"]
        )
    elif container_type == "auto_delete":
        execute_auto_delete(container["paths_to_delete"])
    else:
        print(f"[SPLAT] Unknown container type: {container_type}")

# Ping Trigger
def setup_ping_trigger():
    """Sets up a Flask server to listen for pings to trigger containers."""
    app = Flask(__name__)

    @app.route(config["ping_endpoint"], methods=["POST"])
    def trigger():
        auth = request.headers.get("Authorization")
        if auth != config["auth_key"]:
            return jsonify({"error": "Unauthorized"}), 403

        container_name = request.json.get("container_name")
        if container_name:
            threading.Thread(target=execute_container, args=(container_name,)).start()
            return jsonify({"message": f"Container '{container_name}' triggered."})
        else:
            return jsonify({"error": "No container specified."}), 400

    app.run(host="0.0.0.0", port=5000)

# Main Function
if __name__ == "__main__":
    print("[SPLAT] Starting...")
    if config["trigger_mode"] == "timed":
        print("[SPLAT] Timed mode is not implemented for containers.")
    elif config["trigger_mode"] == "pinged":
        print(f"[SPLAT] Listening for pings at endpoint: {config['ping_endpoint']}")
        setup_ping_trigger()
    else:
        print("[SPLAT] Invalid trigger mode. Exiting.")
